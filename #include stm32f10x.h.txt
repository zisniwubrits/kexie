#include "stm32f10x.h"
#include <cmath>

//unsigned long long tick = 0;
volatile uint32_t phi = 0;
uint32_t state = 2;
// 全局变量，存储从程序开始以来的毫秒数
volatile uint32_t tick = 0;

const uint16_t sine_table[1024] = {
     0,  503,  506,  509,  512,  515,  518,  521,  525,  528,
     531,  534,  537,  540,  543,  546,  549,  552,  555,  558,
     561,  564,  567,  570,  573,  576,  579,  582,  585,  589,
     592,  595,  598,  601,  604,  607,  610,  613,  616,  619,
     621,  624,  627,  630,  633,  636,  639,  642,  645,  648,
     651,  654,  657,  660,  663,  666,  668,  671,  674,  677,
     680,  683,  686,  689,  691,  694,  697,  700,  703,  705,
     708,  711,  714,  717,  719,  722,  725,  728,  730,  733,
     736,  738,  741,  744,  746,  749,  752,  754,  757,  760,
     762,  765,  767,  770,  773,  775,  778,  780,  783,  785,
     788,  790,  793,  795,  798,  800,  803,  805,  808,  810,
     812,  815,  817,  820,  822,  824,  827,  829,  831,  833,
     836,  838,  840,  843,  845,  847,  849,  851,  854,  856,
     858,  860,  862,  864,  866,  868,  870,  873,  875,  877,
     879,  881,  883,  885,  887,  888,  890,  892,  894,  896,
     898,  900,  902,  903,  905,  907,  909,  911,  912,  914,
     916,  917,  919,  921,  922,  924,  926,  927,  929,  930,
     932,  934,  935,  937,  938,  940,  941,  942,  944,  945,
     947,  948,  949,  951,  952,  953,  955,  956,  957,  958,
     960,  961,  962,  963,  964,  965,  966,  968,  969,  970,
     971,  972,  973,  974,  975,  976,  977,  978,  978,  979,
     980,  981,  982,  983,  983,  984,  985,  986,  986,  987,
     988,  989,  989,  990,  990,  991,  992,  992,  993,  993,
     994,  994,  995,  995,  995,  996,  996,  997,  997,  997,
     998,  998,  998,  998,  999,  999,  999,  999,  999, 1000,
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
    1000, 1000, 1000, 1000,  999,  999,  999,  999,  999,  998,
     998,  998,  998,  997,  997,  997,  996,  996,  995,  995,
     995,  994,  994,  993,  993,  992,  992,  991,  990,  990,
     989,  989,  988,  987,  986,  986,  985,  984,  983,  983,
     982,  981,  980,  979,  978,  978,  977,  976,  975,  974,
     973,  972,  971,  970,  969,  968,  966,  965,  964,  963,
     962,  961,  960,  958,  957,  956,  955,  953,  952,  951,
     949,  948,  947,  945,  944,  942,  941,  940,  938,  937,
     935,  934,  932,  930,  929,  927,  926,  924,  922,  921,
     919,  917,  916,  914,  912,  911,  909,  907,  905,  903,
     902,  900,  898,  896,  894,  892,  890,  888,  887,  885,
     883,  881,  879,  877,  875,  873,  870,  868,  866,  864,
     862,  860,  858,  856,  854,  851,  849,  847,  845,  843,
     840,  838,  836,  833,  831,  829,  827,  824,  822,  820,
     817,  815,  812,  810,  808,  805,  803,  800,  798,  795,
     793,  790,  788,  785,  783,  780,  778,  775,  773,  770,
     767,  765,  762,  760,  757,  754,  752,  749,  746,  744,
     741,  738,  736,  733,  730,  728,  725,  722,  719,  717,
     714,  711,  708,  705,  703,  700,  697,  694,  691,  689,
     686,  683,  680,  677,  674,  671,  668,  666,  663,  660,
     657,  654,  651,  648,  645,  642,  639,  636,  633,  630,
     627,  624,  621,  619,  616,  613,  610,  607,  604,  601,
     598,  595,  592,  589,  585,  582,  579,  576,  573,  570,
     567,  564,  561,  558,  555,  552,  549,  546,  543,  540,
     537,  534,  531,  528,  525,  521,  518,  515,  512,  509,
     506,  503,  500,  497,  494,  491,  488,  485,  482,  479,
     475,  472,  469,  466,  463,  460,  457,  454,  451,  448,
     445,  442,  439,  436,  433,  430,  427,  424,  421,  418,
     415,  411,  408,  405,  402,  399,  396,  393,  390,  387,
     384,  381,  379,  376,  373,  370,  367,  364,  361,  358,
     355,  352,  349,  346,  343,  340,  337,  334,  332,  329,
     326,  323,  320,  317,  314,  311,  309,  306,  303,  300,
     297,  295,  292,  289,  286,  283,  281,  278,  275,  272,
     270,  267,  264,  262,  259,  256,  254,  251,  248,  246,
     243,  240,  238,  235,  233,  230,  227,  225,  222,  220,
     217,  215,  212,  210,  207,  205,  202,  200,  197,  195,
     192,  190,  188,  185,  183,  180,  178,  176,  173,  171,
     169,  167,  164,  162,  160,  157,  155,  153,  151,  149,
     146,  144,  142,  140,  138,  136,  134,  132,  130,  127,
     125,  123,  121,  119,  117,  115,  113,  112,  110,  108,
     106,  104,  102,  100,   98,   97,   95,   93,   91,   89,
      88,   86,   84,   83,   81,   79,   78,   76,   74,   73,
      71,   70,   68,   66,   65,   63,   62,   60,   59,   58,
      56,   55,   53,   52,   51,   49,   48,   47,   45,   44,
      43,   42,   40,   39,   38,   37,   36,   35,   34,   32,
      31,   30,   29,   28,   27,   26,   25,   24,   23,   22,
      22,   21,   20,   19,   18,   17,   17,   16,   15,   14,
      14,   13,   12,   11,   11,   10,   10,    9,    8,    8,
       7,    7,    6,    6,    5,    5,    5,    4,    4,    3,
       3,    3,    2,    2,    2,    2,    1,    1,    1,    1,
       1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    1,    1,    1,    1,
       1,    2,    2,    2,    2,    3,    3,    3,    4,    4,
       5,    5,    5,    6,    6,    7,    7,    8,    8,    9,
      10,   10,   11,   11,   12,   13,   14,   14,   15,   16,
      17,   17,   18,   19,   20,   21,   22,   22,   23,   24,
      25,   26,   27,   28,   29,   30,   31,   32,   34,   35,
      36,   37,   38,   39,   40,   42,   43,   44,   45,   47,
      48,   49,   51,   52,   53,   55,   56,   58,   59,   60,
      62,   63,   65,   66,   68,   70,   71,   73,   74,   76,
      78,   79,   81,   83,   84,   86,   88,   89,   91,   93,
      95,   97,   98,  100,  102,  104,  106,  108,  110,  112,
     113,  115,  117,  119,  121,  123,  125,  127,  130,  132,
     134,  136,  138,  140,  142,  144,  146,  149,  151,  153,
     155,  157,  160,  162,  164,  167,  169,  171,  173,  176,
     178,  180,  183,  185,  188,  190,  192,  195,  197,  200,
     202,  205,  207,  210,  212,  215,  217,  220,  222,  225,
     227,  230,  233,  235,  238,  240,  243,  246,  248,  251,
     254,  256,  259,  262,  264,  267,  270,  272,  275,  278,
     281,  283,  286,  289,  292,  295,  297,  300,  303,  306,
     309,  311,  314,  317,  320,  323,  326,  329,  332,  334,
     337,  340,  343,  346,  349,  352,  355,  358,  361,  364,
     367,  370,  373,  376,  379,  381,  384,  387,  390,  393,
     396,  399,  402,  405,  408,  411,  415,  418,  421,  424,
     427,  430,  433,  436,  439,  442,  445,  448,  451,  454,
     457,  460,  463,  466,  469,  472,  475,  479,  482,  485,
     488,  491,  494,  497,
};

void sleep_us(uint32_t n)
{
	SysTick->LOAD = 72 * n;
	SysTick->VAL = 0x00;
	SysTick->CTRL = 0x00000005;
	while (!(SysTick->CTRL & 0x00010000));
	SysTick->CTRL = 0x00000004;
}

void sleep(uint32_t n)
{
	for (uint32_t i = 0; i < 1000; ++i)
		sleep_us(n);
}

void sleep_s(uint32_t n)
{
	for (uint32_t i = 0; i < 1000000; ++i)
		sleep_us(n);
}

void SysTick_Init(void) {
    // 配置每1ms中断一次 (系统时钟72MHz)
    if (SysTick_Config(SystemCoreClock / 1000)) {
        while (1);  // 初始化失败处理
    }
    NVIC_SetPriority(SysTick_IRQn, 0);  // 设置最高优先级
}

void SysTick_Handler(void) 
{
    tick++;  // 毫秒计数器递增
	phi += 4294967 * 1;//0xFFFFFFFF / 1000;
}

uint16_t Get_ADC1_Value(uint8_t channel)
{
    /* 重新配置规则组通道（如果通道需要变化） */
    ADC_RegularChannelConfig(ADC1, channel, 1, ADC_SampleTime_55Cycles5);

    /* 软件启动转换 */
    ADC_SoftwareStartConvCmd(ADC1, ENABLE);

    /* 等待转换结束 */
    while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);

    /* 返回转换结果（读取DR寄存器会自动清除EOC标志）*/
    return ADC_GetConversionValue(ADC1);
}

void PWM_Init(void) {
    GPIO_InitTypeDef GPIO_InitStructure;
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_OCInitTypeDef TIM_OCInitStructure;

    /* 1. 开启时钟 */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); // 开启GPIOA时钟
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);  // 开启TIM3时钟，注意TIM3是APB1上的

    /* 2. 配置PA6为复用推挽输出 */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  // 复用推挽输出
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    /* 3. 配置定时器时基单元 */
    TIM_TimeBaseStructure.TIM_Period = 999;         // 自动重装值 ARR
    TIM_TimeBaseStructure.TIM_Prescaler = 71;       // 预分频器 PSC
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; // 向上计数
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);

    /* 4. 配置TIM3的通道1为PWM模式 */
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;      // PWM模式1
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; // 使能输出
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; // 输出极性高
    TIM_OCInitStructure.TIM_Pulse = 0; // 初始的捕获/比较值 CCR，即初始占空比
    TIM_OC1Init(TIM3, &TIM_OCInitStructure); // 初始化通道1

    /* 5. 使能定时器 */
    TIM_Cmd(TIM3, ENABLE);
}

int main(void)
{
	//float voltage;
	
	PWM_Init();
	
    SysTick_Init();  // 初始化SysTick
    SystemInit();     // 系统时钟初始化（默认72MHz）

	
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_ADC1, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
	
	GPIO_InitTypeDef ga, gb;
	//ADC_InitTypeDef adc;
	
    //ga0.GPIO_Pin = GPIO_Pin_0;
    //ga0.GPIO_Mode = GPIO_Mode_AIN;
    //GPIO_Init(GPIOA, &ga0);
	//RCC_ADCCLKConfig(RCC_PCLK2_Div6);
	
    //adc.ADC_Mode = ADC_Mode_Independent;       // 独立模式
    //adc.ADC_ScanConvMode = DISABLE;            // 单通道，禁用扫描模式
    //adc.ADC_ContinuousConvMode = DISABLE;      // 单次转换模式
    //adc.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None; // 软件触发
    //adc.ADC_DataAlign = ADC_DataAlign_Right;   // 数据右对齐
    //adc.ADC_NbrOfChannel = 1;                  // 要转换的通道数量
    //ADC_Init(ADC1, &adc);

    /* 配置规则组通道：ADC1, 通道0, 采样顺序1, 采样时间55.5周期 */
    //ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_55Cycles5);

    /* 启用 ADC1 */
    //ADC_Cmd(ADC1, ENABLE);

    /* 进行ADC校准（建议上电后校准一次）*/
    //ADC_ResetCalibration(ADC1); // 复位校准
    //while(ADC_GetResetCalibrationStatus(ADC1)); // 等待复位校准完成
    //ADC_StartCalibration(ADC1); // 开始校准
    //while(ADC_GetCalibrationStatus(ADC1));      // 等待校准完成
	
	ga.GPIO_Mode = GPIO_Mode_Out_PP;
	ga.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;
	ga.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &ga);
	
	gb.GPIO_Mode = GPIO_Mode_IPU;
	gb.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_10;
	gb.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &gb);
	
	while(1)
	{
		if (!(GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_0)))
			state = 0;
		if (!(GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_1)))
			state = 1;
		if (!(GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_10)))
			state = 2;
		switch (state)
		{
			case 0:
			{
				//voltage = (float)Get_ADC1_Value(ADC_Channel_0) * 3.3 / 4095;   // 将值转换为电压值（假设VDDA=3.3V）
				GPIO_SetBits(GPIOA, GPIO_Pin_1);
				TIM_SetCompare1(TIM3, 0);
				GPIO_ResetBits(GPIOA, GPIO_Pin_3);
			} 
			break;
			case 1:
			{
				TIM_SetCompare1(TIM3, 1000);
				GPIO_ResetBits(GPIOA, GPIO_Pin_1);
				GPIO_ResetBits(GPIOA, GPIO_Pin_3);
			} 
			break;
			case 2:
			{
				GPIO_SetBits(GPIOA, GPIO_Pin_3);
				TIM_SetCompare1(TIM3, sine_table[phi >> 22]);
				GPIO_ResetBits(GPIOA, GPIO_Pin_1);
			} 
			break;
			default:break;
		}
		//phi += 25000;	
	}
}
